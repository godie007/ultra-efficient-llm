#!/usr/bin/env python3
"""
üß† MOTOR DE RAZONAMIENTO ESTRAT√âGICO - ULTRAEFFICIENTLLM
========================================================

Sistema que analiza preguntas y aplica estrategias de razonamiento espec√≠ficas.
"""

import re
import random
from typing import Dict, List, Tuple, Optional

class ReasoningEngine:
    """Motor de razonamiento estrat√©gico para an√°lisis de preguntas"""
    
    def __init__(self):
        self.reasoning_strategies = {
            'causal': self._apply_causal_reasoning,
            'comparative': self._apply_comparative_reasoning,
            'problem_solving': self._apply_problem_solving_reasoning,
            'safety': self._apply_safety_reasoning,
            'technical': self._apply_technical_reasoning,
            'practical': self._apply_practical_reasoning,
            'scientific': self._apply_scientific_reasoning,
            'consequence': self._apply_consequence_reasoning,
            'out_of_domain': self._apply_out_of_domain_reasoning
        }
        
        # Patrones de detecci√≥n de tipo de pregunta
        self.question_patterns = {
            'causal': [
                r'por qu√©', r'qu√© causa', r'cu√°l es la raz√≥n', r'por qu√© motivo',
                r'qu√© hace que', r'c√≥mo es que', r'por qu√© raz√≥n'
            ],
            'comparative': [
                r'diferencia', r'comparar', r'mejor que', r'peor que',
                r'vs', r'versus', r'entre', r'cu√°l es mejor'
            ],
            'problem_solving': [
                r'qu√© hago', r'c√≥mo soluciono', r'qu√© debo hacer', r'c√≥mo arreglo',
                r'problema', r'error', r'falla', r'qu√© pasa si'
            ],
            'safety': [
                r'peligro', r'riesgo', r'seguro', r'no debo', r'no puedo',
                r'√°cido', r'qu√≠mico', r't√≥xico', r'da√±ino', r'perjudicial',
                r'pH\s*[1-5]', r'pH\s*[9-9]', r'pH\s*1[0-4]', r'ph\s*[1-5]', r'ph\s*[9-9]', r'ph\s*1[0-4]'
            ],
            'technical': [
                r'c√≥mo funciona', r'mecanismo', r'proceso', r'sistema',
                r't√©cnica', r'm√©todo', r'procedimiento'
            ],
            'practical': [
                r'c√≥mo', r'pasos', r'proceso', r'instrucciones',
                r'manera', r'forma', r'modo'
            ],
            'scientific': [
                r'qu√≠mica', r'biol√≥gico', r'f√≠sico', r'reacci√≥n',
                r'pH', r'nutrientes', r'enzimas', r'bacterias'
            ],
            'consequence': [
                r'qu√© pasa si', r'consecuencia', r'resultado', r'efecto',
                r'impacto', r'resultado de', r'ocasiona'
            ]
        }
        
        # Estrategias de razonamiento espec√≠ficas para acuapon√≠a
        self.acuaponia_reasoning = {
            'pH_analysis': {
                'triggers': ['pH', '√°cido', 'b√°sico', 'alcalino', 'acidez'],
                'reasoning': [
                    "El pH afecta la disponibilidad de nutrientes para las plantas",
                    "Los peces tienen rangos de pH espec√≠ficos para sobrevivir",
                    "Las bacterias nitrificantes son sensibles al pH",
                    "El pH incorrecto puede causar estr√©s en el sistema"
                ]
            },
            'pH_extreme': {
                'triggers': ['pH 1', 'pH 2', 'pH 3', 'pH 4', 'pH 5', 'pH 9', 'pH 10', 'pH 11', 'pH 12', 'pH 13', 'pH 14', 'ph 1', 'ph 2', 'ph 3', 'ph 4', 'ph 5', 'ph 9', 'ph 10', 'ph 11', 'ph 12', 'ph 13', 'ph 14', 'ph es de 1', 'ph es de 2', 'ph es de 3', 'ph es de 4', 'ph es de 5', 'ph es de 9', 'ph es de 10', 'ph es de 11', 'ph es de 12', 'ph es de 13', 'ph es de 14'],
                'reasoning': [
                    "Un pH extremo es MORTAL para todo el sistema acuap√≥nico",
                    "Los peces mueren instant√°neamente con pH extremo",
                    "Las bacterias nitrificantes se destruyen completamente",
                    "Las plantas no pueden absorber nutrientes",
                    "El sistema colapsa irremediablemente"
                ]
            },
            'chemical_safety': {
                'triggers': ['√°cido', 'acido', 'qu√≠mico', 'quimico', 'cloro', 'detergente', 'pesticida', 'contaminante', 'toxico', 't√≥xico'],
                'reasoning': [
                    "Los qu√≠micos pueden ser t√≥xicos para los peces",
                    "Las plantas pueden absorber qu√≠micos da√±inos",
                    "Los qu√≠micos pueden matar las bacterias beneficiosas",
                    "El sistema es sensible a contaminantes"
                ]
            },
            'nutrient_balance': {
                'triggers': ['nutriente', 'fertilizante', 'alimento', 'desecho', 'crece', 'crecen', 'crecimiento'],
                'reasoning': [
                    "El exceso de nutrientes puede causar problemas",
                    "La falta de nutrientes afecta el crecimiento",
                    "El balance es crucial para el sistema",
                    "Los nutrientes deben ser biodisponibles"
                ]
            },
            'oxygen_management': {
                'triggers': ['ox√≠geno', 'aire', 'respiraci√≥n', 'aireador', 'respirar'],
                'reasoning': [
                    "Los peces necesitan ox√≠geno disuelto para respirar",
                    "Las bacterias aer√≥bicas necesitan ox√≠geno",
                    "La falta de ox√≠geno puede causar muerte",
                    "El ox√≠geno se consume constantemente"
                ]
            },
            'temperature_control': {
                'triggers': ['temperatura', 'calor', 'fr√≠o', 'clima', 'ambiente'],
                'reasoning': [
                    "La temperatura afecta la actividad de las bacterias",
                    "Los peces tienen rangos de temperatura √≥ptimos",
                    "La temperatura influye en la solubilidad del ox√≠geno",
                    "Los cambios bruscos causan estr√©s"
                ]
            },
            'plant_growth': {
                'triggers': ['planta', 'plantas', 'crece', 'crecen', 'crecimiento', 'mejor', 'mejores'],
                'reasoning': [
                    "Las plantas en acuapon√≠a reciben nutrientes constantemente",
                    "El agua rica en nutrientes promueve el crecimiento r√°pido",
                    "La ausencia de suelo reduce enfermedades de ra√≠z",
                    "El sistema proporciona condiciones √≥ptimas de crecimiento"
                ]
            },
            'ecosystem_balance': {
                'triggers': ['sistema', 'ecosistema', 'balance', 'equilibrio', 'interconectado'],
                'reasoning': [
                    "El sistema acuap√≥nico es un ecosistema cerrado",
                    "Todos los elementos est√°n interconectados",
                    "El balance es crucial para el funcionamiento",
                    "La sinergia entre peces y plantas es beneficiosa"
                ]
            },
            'water_quality': {
                'triggers': ['agua', 'calidad', 'limpia', 'filtrada', 'purificada'],
                'reasoning': [
                    "El agua se recicla constantemente en el sistema",
                    "Los filtros biol√≥gicos mantienen la calidad del agua",
                    "Las plantas ayudan a purificar el agua",
                    "La calidad del agua es superior a otros sistemas"
                ]
            }
        }
        
        # Palabras clave que indican temas fuera del dominio de acuapon√≠a
        self.out_of_domain_keywords = [
            # Tecnolog√≠a y computaci√≥n
            'programaci√≥n', 'c√≥digo', 'software', 'aplicaci√≥n', 'app', 'web', 'internet', 'computadora', 'laptop', 'celular', 'smartphone',
            'python', 'javascript', 'html', 'css', 'java', 'c++', 'base de datos', 'servidor', 'cliente', 'api', 'framework',
            
            # Deportes
            'f√∫tbol', 'futbol', 'basketball', 'baloncesto', 'tenis', 'golf', 'nataci√≥n', 'ciclismo', 'correr', 'marat√≥n', 'olimpiadas',
            
            # Entretenimiento
            'pel√≠cula', 'pelicula', 'serie', 'televisi√≥n', 'tv', 'm√∫sica', 'musica', 'videojuego', 'juego', 'netflix', 'youtube',
            
            # Pol√≠tica y noticias
            'pol√≠tica', 'politica', 'presidente', 'gobierno', 'elecciones', 'congreso', 'senado', 'partido pol√≠tico', 'noticias',
            
            # Cocina y gastronom√≠a
            'receta', 'cocina', 'chef', 'restaurante', 'comida', 'plato', 'ingrediente', 'cocinar', 'hornear', 'fre√≠r',
            
            # Viajes y turismo
            'viaje', 'turismo', 'hotel', 'avi√≥n', 'avion', 'aeropuerto', 'destino', 'vacaciones', 'playa', 'monta√±a',
            
            # Salud y medicina
            'enfermedad', 's√≠ntoma', 'sintoma', 'medicina', 'doctor', 'hospital', 'tratamiento', 'diagn√≥stico', 'diagnostico',
            
            # Finanzas y econom√≠a
            'dinero', 'banco', 'inversi√≥n', 'inversion', 'bolsa', 'acciones', 'econom√≠a', 'economia', 'finanzas', 'cr√©dito', 'credito',
            
            # Educaci√≥n general
            'matem√°ticas', 'matematicas', 'historia', 'geograf√≠a', 'geografia', 'literatura', 'filosof√≠a', 'filosofia', 'arte', 'm√∫sica', 'musica'
        ]
    
    def _is_out_of_acuaponia_domain(self, question_lower: str) -> bool:
        """Determina si la pregunta est√° fuera del dominio de acuapon√≠a"""
        # Si no hay contextos de acuapon√≠a detectados, verificar palabras clave fuera del dominio
        if not any(context in question_lower for context in ['acuapon√≠a', 'acuaponia', 'peces', 'plantas', 'agua', 'sistema', 'nutrientes', 'ph', 'bacterias']):
            # Verificar si contiene palabras clave fuera del dominio
            for keyword in self.out_of_domain_keywords:
                if keyword in question_lower:
                    return True
        return False
    
    def analyze_question(self, question: str) -> Dict:
        """Analiza una pregunta y determina la estrategia de razonamiento"""
        question_lower = question.lower()
        
        # Detectar tipo de pregunta
        detected_types = []
        for question_type, patterns in self.question_patterns.items():
            for pattern in patterns:
                if re.search(pattern, question_lower):
                    detected_types.append(question_type)
                    break
        
        # Detectar contexto espec√≠fico de acuapon√≠a
        acuaponia_contexts = []
        for context, data in self.acuaponia_reasoning.items():
            for trigger in data['triggers']:
                if trigger in question_lower:
                    acuaponia_contexts.append(context)
                    break
        
        # Detectar si est√° fuera del dominio de acuapon√≠a
        is_out_of_domain = self._is_out_of_acuaponia_domain(question_lower)
        
        # Determinar estrategia principal
        primary_strategy = self._determine_primary_strategy(detected_types, acuaponia_contexts, is_out_of_domain)
        
        return {
            'question': question,
            'detected_types': detected_types,
            'acuaponia_contexts': acuaponia_contexts,
            'primary_strategy': primary_strategy,
            'reasoning_chain': self._generate_reasoning_chain(primary_strategy, acuaponia_contexts),
            'is_out_of_domain': is_out_of_domain
        }
    
    def _determine_primary_strategy(self, detected_types: List[str], acuaponia_contexts: List[str], is_out_of_domain: bool) -> str:
        """Determina la estrategia principal de razonamiento"""
        # Si est√° fuera del dominio, usar estrategia especial
        if is_out_of_domain:
            return 'out_of_domain'
        
        if 'safety' in detected_types:
            return 'safety'
        elif 'causal' in detected_types:
            return 'causal'
        elif 'problem_solving' in detected_types:
            return 'problem_solving'
        elif 'consequence' in detected_types:
            return 'consequence'
        elif 'technical' in detected_types:
            return 'technical'
        elif 'comparative' in detected_types:
            return 'comparative'
        elif 'practical' in detected_types:
            return 'practical'
        elif 'scientific' in detected_types:
            return 'scientific'
        else:
            return 'general'
    
    def _generate_reasoning_chain(self, strategy: str, contexts: List[str]) -> List[str]:
        """Genera una cadena de razonamiento basada en la estrategia y contextos"""
        reasoning_chain = []
        
        # Agregar razonamiento espec√≠fico de acuapon√≠a
        for context in contexts:
            if context in self.acuaponia_reasoning:
                reasoning_chain.extend(self.acuaponia_reasoning[context]['reasoning'])
        
        # Agregar razonamiento general de la estrategia
        if strategy in self.reasoning_strategies:
            strategy_reasoning = self.reasoning_strategies[strategy]()
            reasoning_chain.extend(strategy_reasoning)
        
        return reasoning_chain
    
    def apply_reasoning(self, question: str, base_response: str) -> str:
        """Aplica razonamiento estrat√©gico a una respuesta base"""
        analysis = self.analyze_question(question)
        
        # Generar respuesta con razonamiento
        reasoned_response = self._build_reasoned_response(analysis, base_response)
        
        return reasoned_response
    
    def _build_reasoned_response(self, analysis: Dict, base_response: str) -> str:
        """Construye una respuesta con razonamiento aplicado"""
        question = analysis['question']
        strategy = analysis['primary_strategy']
        reasoning_chain = analysis['reasoning_chain']
        
        # Determinar el enfoque de la respuesta
        if strategy == 'out_of_domain':
            return self._build_out_of_domain_response(question, reasoning_chain, base_response)
        elif strategy == 'safety':
            return self._build_safety_response(question, reasoning_chain, base_response)
        elif strategy == 'causal':
            return self._build_causal_response(question, reasoning_chain, base_response)
        elif strategy == 'problem_solving':
            return self._build_problem_solving_response(question, reasoning_chain, base_response)
        elif strategy == 'consequence':
            return self._build_consequence_response(question, reasoning_chain, base_response)
        else:
            return self._build_general_response(question, reasoning_chain, base_response)
    
    def _build_out_of_domain_response(self, question: str, reasoning: List[str], base_response: str) -> str:
        """Construye respuesta amable para preguntas fuera del dominio de acuapon√≠a"""
        response = "## ü§ñ Respuesta Amable - Fuera de Mi Dominio\n\n"
        response += "### üìù Mi Especializaci√≥n\n\n"
        response += "> Soy un **sistema especializado en acuapon√≠a** dise√±ado para ayudarte con preguntas sobre cultivos acuap√≥nicos, peces, plantas, calidad del agua, pH, nutrientes y todo lo relacionado con sistemas de cultivo sostenible.\n\n"
        
        response += "### üéØ Lo Que Puedo Ayudarte\n\n"
        response += "**Mi conocimiento incluye:**\n\n"
        response += "- **üêü Cuidado de peces** en sistemas acuap√≥nicos\n"
        response += "- **üå± Cultivo de plantas** sin suelo\n"
        response += "- **üíß Calidad del agua** y par√°metros\n"
        response += "- **üß™ pH y nutrientes** para el sistema\n"
        response += "- **ü¶† Bacterias nitrificantes** y ciclos biol√≥gicos\n"
        response += "- **üîß Mantenimiento** del sistema acuap√≥nico\n"
        response += "- **‚ö†Ô∏è Seguridad** y prevenci√≥n de problemas\n"
        response += "- **üìä Optimizaci√≥n** del rendimiento\n\n"
        
        response += "### üí° Sugerencia\n\n"
        response += "**¬øTe gustar√≠a preguntarme sobre:**\n\n"
        response += "- ¬øC√≥mo funciona un sistema acuap√≥nico?\n"
        response += "- ¬øQu√© peces son mejores para acuapon√≠a?\n"
        response += "- ¬øC√≥mo mantener el pH correcto?\n"
        response += "- ¬øQu√© plantas crecen mejor en acuapon√≠a?\n"
        response += "- ¬øC√≥mo solucionar problemas comunes?\n\n"
        
        response += "### üå± Acerca de Acuapon√≠a\n\n"
        response += "La **acuapon√≠a** es un sistema de cultivo sostenible que combina la acuicultura (cr√≠a de peces) con la hidropon√≠a (cultivo de plantas sin suelo). Es una forma innovadora y ecol√≥gica de producir alimentos frescos en casa o a escala comercial.\n\n"
        
        response += "**¬°Estoy aqu√≠ para ayudarte con cualquier pregunta sobre acuapon√≠a!** üåü"
        
        return response
    
    def _build_safety_response(self, question: str, reasoning: List[str], base_response: str) -> str:
        """Construye respuesta enfocada en seguridad"""
        if '√°cido' in question.lower():
            response = "## ‚ö†Ô∏è An√°lisis de Seguridad - √Åcidos\n\n"
            response += "### Riesgo Principal\n\n"
            response += "**NO debes agregar √°cido** a un cultivo acuap√≥nico por las siguientes razones cient√≠ficas:\n\n"
            
            response += "### An√°lisis Qu√≠mico\n\n"
            response += "| Aspecto | Efecto |\n"
            response += "|---------|--------|\n"
            response += "| **Alteraci√≥n de pH** | Los √°cidos alteran dr√°sticamente el pH del agua |\n"
            response += "| **pH Ideal** | `6.0-7.0` para acuapon√≠a |\n"
            response += "| **Niveles Peligrosos** | Los √°cidos pueden bajar el pH a niveles peligrosos |\n\n"
            
            response += "### Impacto en los Peces\n\n"
            response += "- **Sensibilidad extrema** a cambios de pH\n"
            response += "- **Estr√©s respiratorio** por pH bajo\n"
            response += "- **Muerte por acidosis**\n\n"
            
            response += "### Efecto en las Plantas\n\n"
            response += "- **Bloqueo de absorci√≥n** de nutrientes\n"
            response += "- **Deficiencias** de hierro, f√≥sforo y otros minerales\n"
            response += "- **Amarillamiento** y problemas nutricionales\n\n"
            
            response += "### Da√±o a las Bacterias\n\n"
            response += "- **Sensibilidad al pH** de bacterias nitrificantes\n"
            response += "- **Muerte de bacterias** beneficiosas\n"
            response += "- **Interrupci√≥n** del ciclo del nitr√≥geno\n\n"
            
            response += "### Alternativas Seguras\n\n"
            response += "- **M√©todos naturales** para ajustar pH\n"
            response += "- **Cambios graduales** de agua\n"
            response += "- **Monitoreo constante** del pH\n"
            
            return response
        
        return f"## ‚ö†Ô∏è An√°lisis de Seguridad\n\n{random.choice(reasoning)}\n\n> {base_response}"
    
    def _build_causal_response(self, question: str, reasoning: List[str], base_response: str) -> str:
        """Construye respuesta enfocada en causalidad"""
        
        # Respuestas espec√≠ficas para preguntas sobre crecimiento de plantas
        if 'crece' in question.lower() or 'crecen' in question.lower() or 'mejor' in question.lower():
            response = "## üå± An√°lisis Causal del Crecimiento\n\n"
            response += "### Causa Principal\n\n"
            response += "Las plantas crecen mejor en acuapon√≠a debido a m√∫ltiples factores sin√©rgicos.\n\n"
            
            response += "### Mecanismos Causales\n\n"
            response += "| Factor | Descripci√≥n |\n"
            response += "|--------|-------------|\n"
            response += "| **1. Nutrici√≥n Constante** | Las plantas reciben nutrientes disueltos 24/7 |\n"
            response += "| **2. Absorci√≥n Eficiente** | Sin suelo, las ra√≠ces absorben nutrientes directamente |\n"
            response += "| **3. Oxigenaci√≥n √ìptima** | Las ra√≠ces tienen acceso constante al ox√≠geno |\n"
            response += "| **4. Sin Enfermedades** | La ausencia de suelo elimina pat√≥genos de ra√≠z |\n"
            response += "| **5. pH Controlado** | El sistema mantiene pH √≥ptimo para absorci√≥n |\n\n"
            
            response += "### Evidencia Cient√≠fica\n\n"
            response += "- **Crecimiento 30-50% m√°s r√°pido** que en suelo\n"
            response += "- **Mayor densidad de nutrientes** en tejidos\n"
            response += "- **Mejor desarrollo radicular**\n"
            response += "- **Mayor producci√≥n por √°rea**\n\n"
            
            response += "### Relaci√≥n Causal\n\n"
            response += "> Este fen√≥meno ocurre porque la acuapon√≠a crea un ecosistema donde cada elemento optimiza el crecimiento de las plantas."
        elif '√°cido' in question.lower() or 'acido' in question.lower() or 'qu√≠mico' in question.lower() or 'quimico' in question.lower():
            response = "## ‚ö†Ô∏è An√°lisis Causal de Seguridad Qu√≠mica\n\n"
            response += "### Causa Principal\n\n"
            response += "Los √°cidos y qu√≠micos son extremadamente peligrosos para el sistema acuap√≥nico.\n\n"
            
            response += "### Mecanismos de Da√±o\n\n"
            response += "| Mecanismo | Efecto |\n"
            response += "|-----------|--------|\n"
            response += "| **1. Toxicidad para Peces** | Los √°cidos causan estr√©s respiratorio y muerte |\n"
            response += "| **2. Da√±o a Bacterias** | Destruyen las bacterias nitrificantes beneficiosas |\n"
            response += "| **3. Absorci√≥n por Plantas** | Las plantas absorben qu√≠micos t√≥xicos |\n"
            response += "| **4. Alteraci√≥n de pH** | Cambios bruscos causan estr√©s en todo el sistema |\n"
            response += "| **5. Contaminaci√≥n Persistente** | Los qu√≠micos pueden persistir en el sistema |\n\n"
            
            response += "### Consecuencias Espec√≠ficas\n\n"
            response += "- **Muerte de peces** por acidosis o toxicidad\n"
            response += "- **Interrupci√≥n del ciclo del nitr√≥geno**\n"
            response += "- **Deficiencias nutricionales** en plantas\n"
            response += "- **P√©rdida del equilibrio** del ecosistema\n\n"
            
            response += "### Relaci√≥n Causal\n\n"
            response += "> Este fen√≥meno ocurre porque el sistema acuap√≥nico es un ecosistema cerrado donde cualquier contaminante afecta a todos los componentes."
        else:
            response = "## üîç An√°lisis Causal\n\n"
            response += "### Causa Principal\n\n"
            response += f"{random.choice(reasoning)}\n\n"
            response += "### Mecanismo\n\n"
            response += f"> {base_response}\n\n"
            response += "### Relaci√≥n Causal\n\n"
            response += "> Este fen√≥meno ocurre porque en acuapon√≠a todos los elementos est√°n interconectados."
        
        return response
    
    def _build_problem_solving_response(self, question: str, reasoning: List[str], base_response: str) -> str:
        """Construye respuesta enfocada en soluci√≥n de problemas"""
        response = "## üõ†Ô∏è Estrategia de Soluci√≥n\n\n"
        response += "### Diagn√≥stico\n\n"
        response += f"> {random.choice(reasoning)}\n\n"
        response += "### Soluci√≥n\n\n"
        response += f"{base_response}\n\n"
        response += "### Prevenci√≥n\n\n"
        response += "> Monitorea regularmente los par√°metros del sistema."
        
        return response
    
    def _build_consequence_response(self, question: str, reasoning: List[str], base_response: str) -> str:
        """Construye respuesta enfocada en consecuencias"""
        response = "## üìä An√°lisis de Consecuencias\n\n"
        response += "### Si haces esto\n\n"
        response += f"> {random.choice(reasoning)}\n\n"
        response += "### Resultado\n\n"
        response += f"{base_response}\n\n"
        response += "### Impacto en el Sistema\n\n"
        response += "> Esto afectar√° todo el ecosistema acuap√≥nico."
        
        return response
    
    def _build_general_response(self, question: str, reasoning: List[str], base_response: str) -> str:
        """Construye respuesta general con razonamiento"""
        response = "## üß† An√°lisis Inteligente\n\n"
        if reasoning:
            response += f"### Razonamiento\n\n"
            response += f"> {random.choice(reasoning)}\n\n"
        response += f"### Respuesta\n\n"
        response += f"{base_response}"
        
        return response
    
    # Estrategias de razonamiento espec√≠ficas
    def _apply_causal_reasoning(self) -> List[str]:
        return [
            "Analicemos la relaci√≥n causa-efecto en el sistema acuap√≥nico",
            "El sistema acuap√≥nico funciona como un ecosistema interconectado",
            "Cada acci√≥n tiene consecuencias en m√∫ltiples niveles del sistema",
            "Identifiquemos los factores que contribuyen al resultado observado",
            "Examinemos c√≥mo los diferentes componentes interact√∫an entre s√≠",
            "Evaluemos la contribuci√≥n de cada elemento al resultado final"
        ]
    
    def _apply_comparative_reasoning(self) -> List[str]:
        return [
            "Comparemos las diferentes opciones disponibles",
            "Evaluemos las ventajas y desventajas de cada m√©todo",
            "Consideremos las alternativas m√°s seguras y efectivas"
        ]
    
    def _apply_problem_solving_reasoning(self) -> List[str]:
        return [
            "Identifiquemos la ra√≠z del problema",
            "Desarrollemos una estrategia sistem√°tica de soluci√≥n",
            "Implementemos medidas preventivas para el futuro"
        ]
    
    def _apply_safety_reasoning(self) -> List[str]:
        return [
            "La seguridad del sistema es la prioridad m√°xima",
            "Cualquier acci√≥n debe considerar el impacto en todos los organismos",
            "Es mejor prevenir que curar en sistemas acuap√≥nicos"
        ]
    
    def _apply_technical_reasoning(self) -> List[str]:
        return [
            "Analicemos los principios t√©cnicos involucrados",
            "Comprendamos los mecanismos biol√≥gicos del sistema",
            "Consideremos los par√°metros t√©cnicos √≥ptimos"
        ]
    
    def _apply_practical_reasoning(self) -> List[str]:
        return [
            "Enfoqu√©monos en soluciones pr√°cticas y aplicables",
            "Consideremos la facilidad de implementaci√≥n",
            "Evaluemos el costo-beneficio de las acciones"
        ]
    
    def _apply_scientific_reasoning(self) -> List[str]:
        return [
            "Basemos nuestras decisiones en principios cient√≠ficos",
            "Analicemos la evidencia y los datos disponibles",
            "Apliquemos el m√©todo cient√≠fico para resolver problemas"
        ]
    
    def _apply_consequence_reasoning(self) -> List[str]:
        return [
            "Evaluemos las consecuencias a corto y largo plazo",
            "Consideremos el impacto en todo el ecosistema",
            "Analicemos los efectos en cadena de nuestras acciones"
        ]

    def _apply_out_of_domain_reasoning(self) -> List[str]:
        """Aplica razonamiento para preguntas fuera del dominio"""
        return [
            "Esta pregunta est√° fuera de mi √°rea de especializaci√≥n",
            "Mi conocimiento se centra en sistemas acuap√≥nicos",
            "Puedo ayudarte mejor con temas relacionados a acuapon√≠a",
            "Te sugiero consultar fuentes especializadas en el tema"
        ]

# Funci√≥n de conveniencia para uso directo
def apply_intelligent_reasoning(question: str, base_response: str) -> str:
    """Aplica razonamiento inteligente a una respuesta base"""
    engine = ReasoningEngine()
    return engine.apply_reasoning(question, base_response) 