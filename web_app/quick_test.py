#!/usr/bin/env python3
"""
Script de prueba r√°pida para verificar las optimizaciones
"""

import requests
import time

def test_backend():
    """Prueba r√°pida del backend optimizado"""
    print("üöÄ Probando backend optimizado...")
    
    try:
        # Health check
        print("1Ô∏è‚É£ Health check...")
        start_time = time.time()
        response = requests.get("http://localhost:8001/api/health", timeout=5)
        end_time = time.time()
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check exitoso en {(end_time - start_time)*1000:.1f}ms")
            print(f"   Modelo cargado: {data.get('model_loaded', False)}")
            print(f"   Thread pool activo: {data.get('thread_pool_active', False)}")
        else:
            print(f"‚ùå Health check fall√≥: {response.status_code}")
            return False
        
        # Model status
        print("\n2Ô∏è‚É£ Estado del modelo...")
        start_time = time.time()
        response = requests.get("http://localhost:8001/api/model/status", timeout=5)
        end_time = time.time()
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Estado obtenido en {(end_time - start_time)*1000:.1f}ms")
            print(f"   Estado: {data.get('status', 'unknown')}")
            print(f"   Entrenado: {data.get('is_trained', False)}")
        else:
            print(f"‚ùå Error obteniendo estado: {response.status_code}")
        
        # Files list
        print("\n3Ô∏è‚É£ Lista de archivos...")
        start_time = time.time()
        response = requests.get("http://localhost:8001/api/files", timeout=5)
        end_time = time.time()
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Lista obtenida en {(end_time - start_time)*1000:.1f}ms")
            print(f"   Archivos: {len(data.get('files', []))}")
        else:
            print(f"‚ùå Error listando archivos: {response.status_code}")
        
        # Models list
        print("\n4Ô∏è‚É£ Lista de modelos...")
        start_time = time.time()
        response = requests.get("http://localhost:8001/api/models", timeout=5)
        end_time = time.time()
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Modelos obtenidos en {(end_time - start_time)*1000:.1f}ms")
            print(f"   Modelos: {len(data.get('models', []))}")
        else:
            print(f"‚ùå Error listando modelos: {response.status_code}")
        
        print("\n‚úÖ Todas las pruebas b√°sicas completadas exitosamente!")
        print("üéâ El backend est√° funcionando correctamente con las optimizaciones")
        
        return True
        
    except requests.exceptions.ConnectionError:
        print("‚ùå No se pudo conectar al backend")
        print("üí° Aseg√∫rate de que est√© ejecut√°ndose en http://localhost:8001")
        return False
    except Exception as e:
        print(f"‚ùå Error durante las pruebas: {e}")
        return False

if __name__ == "__main__":
    print("=" * 50)
    print("üß™ PRUEBA R√ÅPIDA - BACKEND OPTIMIZADO")
    print("=" * 50)
    
    success = test_backend()
    
    if success:
        print("\nüéØ Pr√≥ximos pasos:")
        print("   1. Entrena un modelo en la interfaz web")
        print("   2. Prueba la generaci√≥n de texto")
        print("   3. Ejecuta python test_performance.py para pruebas completas")
    else:
        print("\nüîß Soluci√≥n de problemas:")
        print("   1. Verifica que el backend est√© ejecut√°ndose")
        print("   2. Revisa los logs del backend")
        print("   3. Aseg√∫rate de que el puerto 8001 est√© disponible")
    
    print("\n" + "=" * 50) 